name: GPT Code Review

on:
  pull_request:
    branches:
      - master  # Specify the branch to run on

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  code_review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - uses: GrantBirki/git-diff-action@v2.4.0
        id: git-diff
        with:
          raw_diff_file_output: diff.txt
          file_output_only: "true"

      - name: Perform Code Review With GPT-4
        id: code_review_suggestions
        run: |
          # Read the list of changed files
          changed_files=$(cat ${{ steps.git-diff.outputs.raw-diff-path }} | grep 'diff --git' | awk '{print $3}' | sed 's|b/||')

          echo "Changed files: $changed_files"
          
          for file in $changed_files; do
            echo "Processing file: $file"

            # Get the diff for the current file
            file_diff=$(awk "/^diff --git a\/$file b\/$file/,/^diff --git/" ${{ steps.git-diff.outputs.raw-diff-path }} | sed '$d')

            if [ -z "$file_diff" ]; then
              echo "No changes found for $file"
              continue
            fi

            echo "File Diff: $file_diff"
            
            # Escape newlines and double quotes in the file_diff
            escaped_diff=$(echo "$file_diff" | jq -s -R -r @json)
            
            # Prepare the request payload for OpenAI
            request_payload="{
              \"messages\": [
                { \"role\": \"system\", \"content\": \"Review the provided Node.js code. Point out issues only when necessary and suggest improvements where applicable. Use clear, simple language, and avoid unnecessary verbosity. If everything looks good, respond with all good. Provide explanations in the most concise and understandable way possible. You don't need to provide an updated code just show where the error lies. If there are no suggestions then you don't even need to mention it in output. Make sure that for one issue you need to respond within 50 chars. overall you can take more than 50 but for one issue only max 50. Also you need to categorize the review points in 3 priorities. High(Must DO), Medium( Good to have), Low(Info).\" },
                { \"role\": \"user\", \"content\": $escaped_diff }
              ]
            }"
            
            # Make the request to GPT-4
            response=$(curl -s -X POST https://code-guardians.openai.azure.com/openai/deployments/code-guardians-gpt-4o/chat/completions?api-version=2024-06-01 \
              -H "Content-Type: application/json" \
              -H "api-key: ${{ secrets.OPEN_AI_KEY }}" \
              -d "$request_payload")
            
            # Extract the code review suggestions from the response
            code_review_suggestions=$(echo "$response" | jq -r '.choices[0].message.content')

            # Log and save the suggestions to a file for each file
            echo "GPT-4 Code Review Suggestions for $file: $code_review_suggestions"
            echo "$code_review_suggestions" > "code_suggestions_${file//\//_}.txt"

            # Post the comment to GitHub
            escaped_comments=$(echo "$code_review_suggestions" | jq -s -R -r @json)
            echo "Posting the comment for $file"
            curl -s -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
              -d "{\"body\":$escaped_comments}"
          done
